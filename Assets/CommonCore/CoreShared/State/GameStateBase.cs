using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using UnityEngine;

namespace CommonCore.State
{
    //DO NOT EDIT THIS FILE

    /// <summary>
    /// Represents the entire state of the game
    /// </summary>
    public partial class GameState
    {
        private static GameState instance;

        public static GameState Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new GameState();
                }
                return instance;
            }
        }

        /// <summary>
        /// Purges the current game state and recreates it
        /// </summary>
        public static void Reset()
        {
            instance = new GameState();
        }

        /// <summary>
        /// Saves the current game state to file
        /// </summary>
        public static void SerializeToFile(string path)
        {
            string data = Serialize();
            File.WriteAllText(path, data);
        }

        /// <summary>
        /// Serializes the current game state to a string
        /// </summary>
        public static string Serialize()
        {
            return JsonConvert.SerializeObject(Instance,
                Formatting.Indented,
                new JsonSerializerSettings
                {
                    Converters = CCJsonConverters.Defaults.Converters,
                    TypeNameHandling = TypeNameHandling.Auto
                });
        }

        /// <summary>
        /// Loads a file into the current game state
        /// </summary>
        public static void DeserializeFromFile(string path)
        {
            Deserialize(File.ReadAllText(path));
        }

        /// <summary>
        /// Deserializes a string and replaces the current game state
        /// </summary>
        public static void Deserialize(string data)
        {
            instance = JsonConvert.DeserializeObject<GameState>(data,
            new JsonSerializerSettings
            {
                Converters = CCJsonConverters.Defaults.Converters,
                TypeNameHandling = TypeNameHandling.Auto
            });
        }

        /// <summary>
        /// Loads initial values into the current game state
        /// </summary>
        public static void LoadInitial()
        {
            instance.Init();
        }

        /// <summary>
        /// Loads initial values into the current game state
        /// </summary>
        private void Init()
        {
            //we actually use reflection to get all "decorated" methods and run them

            var initMethods = GetType().GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
                .Where(m => m.GetCustomAttributes(typeof(InitAttribute), false).Length > 0)
                .ToList();

            if (initMethods.Count == 0)
                return; //abort if no init methods available
            else if (initMethods.Count == 1)
                initMethods[0].Invoke(this, null); //if we only have one, it's easy
            else
            {
                initMethods.Sort((m1, m2) => ((InitAttribute)m2.GetCustomAttributes(typeof(InitAttribute), false)[0]).Priority
                .CompareTo(((InitAttribute)m1.GetCustomAttributes(typeof(InitAttribute), false)[0]).Priority));
                foreach (var m in initMethods)
                    m.Invoke(this, null);
            }
        }

        //basic game data to be shared across games

        public Dictionary<string, object> GlobalDataState = new Dictionary<string, object>();
        public Dictionary<string, Dictionary<string, object>> LocalDataState = new Dictionary<string, Dictionary<string, object>>();

        public string CurrentScene;
        public bool SaveLocked;
        public bool InitialLoaded; //mostly for editor hacks

        [JsonProperty]
        private int CurrentUID;
        [JsonIgnore]
        public int NextUID { get { return ++CurrentUID; } }

        //init system attribute

        /// <summary>
        /// Decorate methods with this atrribute to have them run on GameState initialization
        /// </summary>
        public class InitAttribute : Attribute
        {
            public int Priority { get; private set; } = 0;

            public InitAttribute()
            {

            }

            public InitAttribute(int priority)
            {
                Priority = priority;
            }
        }
    }
}
